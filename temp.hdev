<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.05.0.0">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off ()</l>
<l>dev_close_window()</l>
<l>read_image(Image,'E:/halcon_data/tiaoxma11.png')</l>
<c>*原图片/b3.png</c>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>* dev_display (Image)</l>
<l>rgb1_to_gray (Image, grayImage)</l>
<c>*基于直方图的自适应阈值分割法</c>
<l>gray_histo_range (Image, grayImage, 0, 255, 256, Histo, BinSize)</l>
<l>create_funct_1d_array (Histo, Function)</l>
<l>smooth_funct_1d_gauss (Function, 2, SmoothedFunction)</l>
<l>derivate_funct_1d (SmoothedFunction, 'first', Derivative)</l>
<l>zero_crossings_funct_1d (Derivative, ZeroCrossings)</l>
<l>get_y_value_funct_1d (Derivative, ZeroCrossings, 'constant', Y)</l>
<l>tuple_length (Y, Length)</l>
<l>a := []</l>
<l>j := 0</l>
<l>temp := Y[7]&lt;0</l>
<l>c := ZeroCrossings[1]</l>
<l>for i := 0 to Length-1 by 1</l>
<l>    if (Y[i] &gt; 0) </l>
<c>    *二阶导数小于0的点为极大值点</c>
<l>        a[j] := ZeroCrossings[i]</l>
<l>        j := j+1</l>
<l>    endif</l>
<l>endfor</l>
<l>tuple_length (a, aLength)</l>
<c>*直方图选第二个波峰 具体再调</c>
<l>mingray := a[aLength-5]</l>
<l>threshold (grayImage, Regions, mingray, 255)</l>
<c>*中值滤波</c>
<l>* median_image (grayImage, ImageMedian, 'square', 3, 'mirrored')</l>
<c>*进行局部局阈值分割</c>
<c>*20为分割亮暗区域的条件</c>
<l>* dyn_threshold (grayImage, ImageMedian, RegionDynThresh, 20, 'not_equal')</l>
<c>*创建圆形结构元素，用于闭运算</c>
<l>gen_circle(StructElement, 5, 5, 10)</l>
<c>*对图像中较亮的区域进行闭运算处理，填补各自轮廓中的小空隙</c>
<l>closing(Regions, StructElement, closeImage)</l>
<c>*孔洞填充</c>
<l>fill_up(closeImage, fillupImage)</l>
<c>*开</c>
<l>opening(fillupImage, StructElement, openImage)</l>
<c>*分割开</c>
<l>connection (openImage, ConnectedRegions)</l>
<c>*按面积选取最大的区域</c>
<l>select_shape_std (ConnectedRegions, SelectedRegion, 'max_area', 100)</l>
<c>*找外接矩形</c>
<l>smallest_rectangle2 (SelectedRegion, Row16, Column16, Phi3, Length1, Length2)</l>
<c>*提取仿射最小外接矩形的四个顶点坐标</c>
<l>gen_rectangle2_contour_xld (Rectangle4, Row16, Column16, Phi3, Length1, Length2)</l>
<c>*xld转region</c>
<l>gen_region_contour_xld (Rectangle4, RegionXLD, 'filled')</l>
<c>*原图对比裁剪出快递单</c>
<l>reduce_domain (Image, RegionXLD, ImageReduced)</l>
<c>*求取区域的方向</c>
<l>orientation_region (RegionXLD, Phi)</l>
<c>*求取区域的中心</c>
<l>area_center (RegionXLD, Area, Row, Column)</l>
<c>*求取区域的角度，参数6：新的旋转之后的角度</c>
<l>vector_angle_to_rigid (Row, Column, Phi, Row, Column, -rad(90), HomMat2D)</l>
<l>affine_trans_image (ImageReduced, ImageAffinTrans, HomMat2D, 'constant', 'true')</l>
<c>*对区域旋转操作：转到水平</c>
<l>affine_trans_region (RegionXLD, RegionAffineTrans, HomMat2D, 'nearest_neighbor')</l>
<c>*原图对比裁剪出快递单</c>
<l>reduce_domain (ImageAffinTrans, RegionAffineTrans, ImageReduced2)</l>
<l>rgb1_to_gray (ImageReduced2, grayImage2)</l>
<l>mean_image (grayImage2, ImageMean, 9, 9)</l>
<c>****************阈值分割提取码和字符****************</c>
<l>binary_threshold (ImageMean, Regionbi, 'max_separability', 'dark', UsedThreshold1)</l>
<l>* regiongrowing(ImageMean,Regions2,3,3,6,100)</l>
<l>* closing_circle (Regions2, RegionClosing, 3.5)</l>
<l>* closing_rectangle1 (Regions2, RegionClosing, Width, Height)</l>
<l>connection(Regionbi, ConnectedRegions2)</l>
<c>*传递前景区域，结果存储在元组中，元组中的值的索引对应于输入区域的索引</c>
<l>area_center(ConnectedRegions2, Area, Row, Column)</l>
<c>*对元组的元素进行排序并返回排序后的元组的索引</c>
<l>tuple_sort_index(Area, Indices)</l>
<c>*计算元组长度</c>
<l>tuple_length(Area,Length)</l>
<c>*取面积最大的几个区域删去</c>
<l>area_tuple := []</l>
<l>area_tuple2 := []</l>
<l>area_tuple3 := []</l>
<l>for i := 1 to 1 by 1</l>
<l>    area_tuple[i] := Indices[Length-i]+1</l>
<l>endfor</l>
<c>* 小</c>
<l>for j := 0 to Length/10 by 1</l>
<l>    area_tuple2[j] := Indices[j]+1</l>
<l>endfor</l>
<l>tuple_union (area_tuple, area_tuple2, Union)</l>
<l>i := 0</l>
<l>for k := 0 to Length-1 by 1</l>
<l>    if (Area[k]&lt;450 or Area[k]&gt;500)</l>
<l>        area_tuple3[i] := k</l>
<l>        i := i+1</l>
<l>    endif</l>
<l>endfor</l>
<l>remove_obj (ConnectedRegions2, ObjectsReduced, Union)</l>
<l>closing_rectangle1(ObjectsReduced, closingRecRegion, 1, 4)</l>
<l>* orientation_region (closingRecRegion, Phi1)</l>
<l>* select_shape (closingRecRegion, SelectedRegions, 'orientation', 'and', 1.57, 1.571)</l>
<l>* select_shape (closingRecRegion, SelectedRegions1, 'orientation', 'and', -3.142, -3.14)</l>
<l>* union1 (SelectedRegions, RegionUnion)</l>
<c>*膨胀</c>
<l>dilation_rectangle1 (closingRecRegion, RegionDilation, 10, 1)</l>
<l>connection (RegionDilation, ConnectedRegions1)</l>
<l>select_shape_std (ConnectedRegions1, SelectedRegions1, 'max_area', 70)</l>
<l>reduce_domain (ImageAffinTrans, SelectedRegions1, oneImageReduced1)</l>
<c></c>
<c>***竖向条形码***</c>
<l>binary_threshold (ImageMean, RegionBinary, 'max_separability', 'dark', UsedThreshold)</l>
<l>connection (RegionBinary, ConnectedRegionsBinary)</l>
<l>select_shape (ConnectedRegionsBinary, SelectedRegions2, 'orientation', 'and', -0.5, 0.5)</l>
<l>union1 (SelectedRegions2, RegionUnion2)</l>
<l>dilation_rectangle1 (RegionUnion2, RegionDilation2, 30, 100)</l>
<l>connection (RegionDilation2, ConnectedRegions3)</l>
<l>select_shape_std (ConnectedRegions3, SelectedRegions3, 'max_area', 70)</l>
<l>reduce_domain (ImageAffinTrans, SelectedRegions3, oneImageReduced2)</l>
<l>difference (RegionBinary, SelectedRegions3, RegionDifference1)</l>
<l>difference (RegionDifference1, SelectedRegions1, RegionDifference)</l>
<c></c>
<c>********************一维码截取完成********************</c>
<c>********************二维码********************</c>
<l>* threshold (ImageReduced1, Regions1, 35, 165)</l>
<l>gen_circle(StructElement2, 5, 5, 5)</l>
<l>closing (RegionDifference, StructElement2, RegionClosing1)</l>
<l>connection (RegionClosing1, ConnectedRegions4)</l>
<l>select_shape_std (ConnectedRegions4, SelectedRegionQR, 'max_area', 100)</l>
<c>*找外接矩形</c>
<l>smallest_rectangle2 (SelectedRegionQR, Row16, Column16, Phi3, Length1, Length2)</l>
<c>*提取仿射最小外接矩形的四个顶点坐标</c>
<l>gen_rectangle2_contour_xld (Rectangle4QR, Row16, Column16, Phi3, Length1, Length2)</l>
<c>*xld转region</c>
<l>gen_region_contour_xld (Rectangle4QR, RegionXLDQR, 'filled')</l>
<c>*原图对比裁剪出快递单</c>
<l>reduce_domain (Image, RegionXLDQR, ImageReducedQR)</l>
<c></c>
<c>********************一维码识别********************</c>
<c>*创建条形码模型句柄。</c>
<l>create_bar_code_model ([], [], BarCodeHandle)</l>
<c>*设置要查找的条码的最小宽度参数，也就是黑色和白色矩形 条沿着扫描方向的最小宽度</c>
<l>set_bar_code_param (BarCodeHandle, 'element_size_min', 1.5)</l>
<c>*设置要查找条码的解码过程的中间结果是否保存，1是，0，否。</c>
<l>set_bar_code_param (BarCodeHandle, 'persistence', 1)</l>
<c>*设置最少使用两条扫描线进行计算，结果相同才认为结果正确</c>
<l>set_bar_code_param (BarCodeHandle, 'min_identical_scanlines', 2)</l>
<c>*设置扫码个数(设置为0，则扫描所有条码)</c>
<l>set_bar_code_param (BarCodeHandle, 'stop_after_result_num', 0)</l>
<l>find_bar_code (oneImageReduced1, SymbolRegions, BarCodeHandle, 'auto', DecodedDataStrings)</l>
<l>if(|DecodedDataStrings|)</l>
<l>    CandidatesIds := [0:|DecodedDataStrings|-1]</l>
<l>else</l>
<l>    CandidatesIds := 'all'</l>
<l>endif</l>
<l>for Index := 0 to |DecodedDataStrings|-1 by 1</l>
<c>    *获取条码计算的中间结果：条码区域</c>
<l>    get_bar_code_object(Candidates, BarCodeHandle, CandidatesIds[Index], 'candidate_regions')</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Candidates)</l>
<c>    *获取条码计算的中间结果：扫描线</c>
<l>    get_bar_code_object(ValidScanLines, BarCodeHandle, CandidatesIds[Index], 'scanlines_valid')</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_display (ValidScanLines)</l>
<l>    disp_message (WindowHandle, DecodedDataStrings[Index], 'window', 20*Index, 12, 'black', 'true')</l>
<l>endfor</l>
<c></c>
<c>********************二维码识别********************</c>
<l>create_data_code_2d_model ('QR Code', [], [], DataCodeHandle)</l>
<l>*set_data_code_2d_param (DataCodeHandle, 'polarity', 'light_on_dark')</l>
<l>find_data_code_2d (ImageReducedQR, SymbolXLDs, DataCodeHandle,  'train', 'all', ResultHandles, DecodedDataStrings)</l>
<l>disp_message (WindowHandle, '识别结果：'+DecodedDataStrings, 'window', 12, 12, 'black', 'true')</l>
<l>clear_data_code_2d_model (DataCodeHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
